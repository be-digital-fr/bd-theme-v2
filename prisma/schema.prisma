// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminPreferences {
  id                String   @id @default(cuid())
  isMultilingual    Boolean  @default(false)
  supportedLanguages String[] @default([])
  defaultLanguage   String   @default("fr")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("admin_preferences")
}

model Translation {
  id              String   @id @default(cuid())
  sourceText      String
  translatedText  String
  sourceLanguage  String
  targetLanguage  String
  fieldName       String
  documentId      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([sourceText, sourceLanguage, targetLanguage, fieldName, documentId])
  @@index([documentId])
  @@index([documentId, fieldName])
  @@map("translations")
}

// Better Auth Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  sessions      Session[]
  accounts      Account[]
  carts         Cart[]
  orders        Order[]
  
  // Analytics and Social Relations
  productViews  ProductView[]
  favorites     UserFavorite[]
  ratings       ProductRating[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  accountId         String
  providerId        String
  userId            String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id        String   @id @default(cuid())
  identifier String
  value     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verifications")
}

// E-commerce Models
model Category {
  id           String    @id @default(cuid())
  sanityId     String    @unique
  name         String
  slug         String    @unique
  description  String?
  imageUrl     String?
  displayOrder Int       @default(0)
  isActive     Boolean   @default(true)
  parentId     String?
  parent       Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryHierarchy")
  products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([displayOrder])
  @@index([isActive])
  @@index([parentId])
  @@map("categories")
}

model Product {
  id                String           @id @default(cuid())
  sanityId          String           @unique
  title             String
  slug              String           @unique
  shortDescription  String?
  longDescription   String?
  price             Decimal          @db.Decimal(10, 2)
  imageUrl          String?
  isAvailable       Boolean          @default(true)
  stockQuantity     Int?
  preparationTime   Int              // in minutes
  categoryId        String
  category          Category         @relation(fields: [categoryId], references: [id])
  
  // External integrations
  uberEatsId        String?
  deliverooId       String?
  uberEatsActive    Boolean          @default(false)
  deliverooActive   Boolean          @default(false)
  uberEatsLastSync  DateTime?
  deliverooLastSync DateTime?
  
  // Relations
  productIngredients ProductIngredient[]
  productExtras     ProductExtra[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
  
  // Analytics and Social Relations
  views             ProductView[]
  popularity        ProductPopularity?
  favorites         UserFavorite[]
  ratings           ProductRating[]
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([categoryId])
  @@index([isAvailable])
  @@index([slug])
  @@index([uberEatsId])
  @@index([deliverooId])
  @@map("products")
}

model Ingredient {
  id               String              @id @default(cuid())
  sanityId         String              @unique
  name             String
  slug             String              @unique
  description      String?
  imageUrl         String?
  allergens        String[]            @default([])
  isVegetarian     Boolean             @default(true)
  isVegan          Boolean             @default(false)
  isGlutenFree     Boolean             @default(false)
  isRemovable      Boolean             @default(true)
  additionalPrice  Decimal             @default(0) @db.Decimal(10, 2)
  
  // Nutritional info
  calories         Int?
  protein          Decimal?            @db.Decimal(5, 2)
  carbohydrates    Decimal?            @db.Decimal(5, 2)
  fat              Decimal?            @db.Decimal(5, 2)
  fiber            Decimal?            @db.Decimal(5, 2)
  sodium           Int?                // in mg
  
  productIngredients ProductIngredient[]
  
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@index([slug])
  @@map("ingredients")
}

model Extra {
  id            String         @id @default(cuid())
  sanityId      String         @unique
  name          String
  slug          String         @unique
  description   String?
  imageUrl      String?
  type          String         // size, topping, side, sauce, drink, other
  basePrice     Decimal        @db.Decimal(10, 2)
  maxQuantity   Int?
  isAvailable   Boolean        @default(true)
  allergens     String[]       @default([])
  isVegetarian  Boolean        @default(false)
  isVegan       Boolean        @default(false)
  
  // Nutritional info
  calories      Int?
  protein       Decimal?       @db.Decimal(5, 2)
  carbohydrates Decimal?       @db.Decimal(5, 2)
  fat           Decimal?       @db.Decimal(5, 2)
  
  // External integrations
  uberEatsId    String?
  deliverooId   String?
  
  productExtras ProductExtra[]
  cartItemExtras CartItemExtra[]
  orderItemExtras OrderItemExtra[]
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([slug])
  @@index([type])
  @@index([isAvailable])
  @@map("extras")
}

// Junction tables for many-to-many relationships
model ProductIngredient {
  id           String     @id @default(cuid())
  productId    String
  ingredientId String
  isRequired   Boolean    @default(true)
  canRemove    Boolean    @default(true)
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([productId, ingredientId])
  @@map("product_ingredients")
}

model ProductExtra {
  id        String  @id @default(cuid())
  productId String
  extraId   String
  price     Decimal @db.Decimal(10, 2) // Override price for this product
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  extra     Extra   @relation(fields: [extraId], references: [id], onDelete: Cascade)

  @@unique([productId, extraId])
  @@map("product_extras")
}

// Cart and Order models for e-commerce functionality
model Cart {
  id        String     @id @default(cuid())
  userId    String?
  sessionId String?    // For anonymous users
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
  @@index([sessionId])
  @@map("carts")
}

model CartItem {
  id        String          @id @default(cuid())
  cartId    String
  productId String
  quantity  Int             @default(1)
  notes     String?
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  extras    CartItemExtra[]
  removedIngredients String[] @default([]) // IDs of removed ingredients
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}

model CartItemExtra {
  id         String   @id @default(cuid())
  cartItemId String
  extraId    String
  quantity   Int      @default(1)
  cartItem   CartItem @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  extra      Extra    @relation(fields: [extraId], references: [id], onDelete: Cascade)

  @@unique([cartItemId, extraId])
  @@map("cart_item_extras")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String?
  customerEmail   String
  customerName    String
  customerPhone   String?
  status          String      @default("pending") // pending, confirmed, preparing, ready, completed, cancelled
  type            String      // pickup, delivery, dine_in
  paymentStatus   String      @default("pending") // pending, paid, failed, refunded
  paymentMethod   String?     // cash, card, online
  totalAmount     Decimal     @db.Decimal(10, 2)
  currency        String      @default("EUR")
  
  // Pickup/Delivery info
  scheduledFor    DateTime?
  pickupLocation  String?
  deliveryAddress String?
  
  // External platform data
  source          String      @default("website") // website, uber_eats, deliveroo
  externalId      String?     // ID from external platform
  externalData    Json?       // Additional data from external platforms
  
  user            User?       @relation(fields: [userId], references: [id])
  items           OrderItem[]
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([userId])
  @@index([status])
  @@index([orderNumber])
  @@index([source])
  @@index([externalId])
  @@map("orders")
}

model OrderItem {
  id          String           @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Decimal          @db.Decimal(10, 2) // Price at time of order
  notes       String?
  order       Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product          @relation(fields: [productId], references: [id])
  extras      OrderItemExtra[]
  removedIngredients String[]  @default([]) // IDs of removed ingredients
  createdAt   DateTime         @default(now())

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model OrderItemExtra {
  id          String    @id @default(cuid())
  orderItemId String
  extraId     String
  quantity    Int       @default(1)
  price       Decimal   @db.Decimal(10, 2) // Price at time of order
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  extra       Extra     @relation(fields: [extraId], references: [id])

  @@unique([orderItemId, extraId])
  @@map("order_item_extras")
}

// Analytics and Popularity models
model ProductView {
  id        String   @id @default(cuid())
  productId String
  userId    String?
  sessionId String?  // For anonymous users
  ipAddress String?
  userAgent String?
  viewedAt  DateTime @default(now())
  
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([productId])
  @@index([userId])
  @@index([sessionId])
  @@index([viewedAt])
  @@map("product_views")
}

model ProductPopularity {
  id              String   @id @default(cuid())
  productId       String   @unique
  viewCount       Int      @default(0)
  orderCount      Int      @default(0)
  totalRevenue    Decimal  @default(0) @db.Decimal(10, 2)
  averageRating   Decimal? @db.Decimal(3, 2) // 0.00 to 5.00
  popularityScore Decimal  @default(0) @db.Decimal(5, 2) // Computed score
  trendScore      Decimal  @default(0) @db.Decimal(5, 2) // Trending score
  lastUpdated     DateTime @updatedAt
  createdAt       DateTime @default(now())
  
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([popularityScore])
  @@index([trendScore])
  @@index([lastUpdated])
  @@map("product_popularity")
}

model UserFavorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("user_favorites")
}

model ProductRating {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @db.SmallInt // 1-5 stars
  comment   String?
  isVerified Boolean @default(false) // Verified purchase
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([rating])
  @@index([isVerified])
  @@map("product_ratings")
}
